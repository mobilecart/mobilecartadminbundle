<script type="text/template" id="customer-grid-single">
    <td align="center">
        <input type="radio" name="select_customer_id" class="select-customer" id="customer-<%- id %>" <% if (checked == 1) { %> checked="checked"<% } %> />
    </td>
    <td><%- id %></td>
    <td><%- first_name %></td>
    <td><%- last_name %></td>
    <td><%- email %></td>
</script>

<script type="text/html" id="customer-pagination-template">
    <button type="button" class="prev btn-default btn <% if (currentPage == 1) { %> disabled <% } %>" aria-label="Previous"><span aria-hidden="true">&laquo;</span></button>
    <input type="number" value="<%= currentPage %>" name="page" id="product-page" class="form-control number paginator">
    <button type="button" class="btn btn-default pull-right next <% if (currentPage >= totalPages) { %> disabled <% } %>" aria-label="Next"><span aria-hidden="true">&raquo;</span></button>
</script>

<script type="text/html" id="customer-grid-adv-filter">
    <div class="filter row">
        <div class="col-xs-4">
            <select name="filter_field[<%= counter %>]" class="form-control adv-filter-field">
                <% _.each(fields, function(field) { %>
                <option value="<%= field.code %>" data-type="<%= field.type %>"
                <% if (!_.isUndefined(field.selected)) { %> selected="selected"<% } %>
                <% if (!_.isUndefined(field.choices)) { %> data-choices='{"choices":<%= JSON.stringify(field.choices) %>}'<% } %>><%= field.label %></option>
                <% }); %>
            </select>
        </div>
        <div class="col-xs-4">
            <select name="filter_op[<%= counter %>]" class="form-control adv-filter-op">
                <% _.each(ops, function(op) { %>
                <option value="<%= op.code %>" data-types='{"types":<%= JSON.stringify(op.types) %>}'<% if (!_.isUndefined(op.selected)) { %> selected="selected"<% } %>><%= op.label %></option>
                <% }); %>
            </select>
        </div>
        <div class="col-xs-3">
            <% if (choices.length > 0) { %>
            <select name="filter_val[<%= counter %>]" class="form-control adv-filter-input">
                <% _.each(choices, function(option) { %>
                <option value="<%= option.value %>"<% if (option.value == value) { %> selected="selected"<% } %>><%= option.label %></option>
                <% }); %>
            </select>
            <% } else { %>
            <input name="filter_val[<%= counter %>]" type="text" class="form-control adv-filter-input" value="<%= value %>" />
            <% } %>
        </div>
        <div class="col-xs-1">
            <% if (remove) { %>
            <a href="javascript:;" class="btn btn-default remove-filter"><i class="glyphicon glyphicon-remove"> </i></a>
            <% } else { %>
            <a href="javascript:;" class="btn btn-default add-filter"><i class="glyphicon glyphicon-plus-sign"></i></a>
            <% } %>
        </div>
    </div>
</script>

<script type="text/javascript">

App.Customer = {};
App.Customer.models = {};
App.Customer.collections = {};
App.Customer.collections.dynamic = {};
App.Customer.views = {};
App.Customer.views.dynamic = {};

// Sortable
App.Customer.models.Sortable = Backbone.Model.extend({});
App.Customer.collections.SortableCollection = Backbone.Collection.extend({
    model: App.Customer.models.Sortable
});

// AdvFilter
App.Customer.models.AdvFilter = Backbone.Model.extend({});
App.Customer.collections.AdvFilterCollection = Backbone.Collection.extend({
    model: App.Customer.models.AdvFilter
});

// Selected Customers
App.Customer.models.SelectedCustomer = Backbone.Model.extend({});
App.Customer.collections.SelectedCustomerCollection = Backbone.Collection.extend({
    model: App.Customer.models.SelectedCustomer
});

// Customers
App.Customer.models.Customer = Backbone.Model.extend({});
App.Customer.collections.PaginatedCollection = Backbone.PageableCollection.extend({
    key: '',
    url: App.serverURL + 'admin/customer/',
    mode: 'server',
    model: App.Customer.models.Customer,
    state: {
        pageSize: 30,
        sortKey: 'id',
        order: 1,
        currentPage: 1,
        totalPages: null,
        totalRecords: null
    },
    queryParams: {
        sortKey: 'sort',
        order: 'direction',
        directions: {
            "-1": 'asc',
            "1": 'desc'
        },
        currentPage: 'page',
        format: 'json',
        q: ''
    },
    parse: function(fullResponse) {

        var response = fullResponse.result;
        var search = fullResponse.search;
        var columns = fullResponse.columns;

        var sortBy = search.sortBy;
        var sortDir = search.sortDir;
        for (var x = 0; x < columns.length; x++) {
            var column = columns[x];
            if (column.key == sortBy) {
                columns[x].isActive = 1;
                columns[x].direction = sortDir;
                break;
            }
        }

        // Set state
        this.state.totalRecords = parseInt(response.total);
        this.state.totalPages = parseInt(response.pages);

        // handle table header sorting
        if (typeof(App.Customer.views.sorting) === 'undefined' ||
                App.Customer.views.sorting === null ||
                typeof(App.Customer.collections.sorting) === 'undefined') {

            App.Customer.collections.sorting = new App.Customer.collections.SortableCollection(columns);

            App.Customer.views.sorting = new App.Customer.views.TableHeading({
                collection: App.Customer.collections.sorting,
                el: App.Customer.Container.find('table thead.grid-header')
            });

            App.Customer.views.sorting.render(); // view should be changing based on model changes
        } else {
            App.Customer.collections.sorting.reset(columns);
        }

        // handle adv. filters
        if (typeof(App.Customer.views.advfilters) === 'undefined' ||
                App.Customer.views.advfilters === null ||
                typeof(App.Customer.collections.advfilters) === 'undefined') {

            App.Customer.collections.advfilters = new App.Customer.collections.AdvFilterCollection(search.advFilters);

            App.Customer.views.advfilters = new App.Customer.views.GridFilterView({
                collection: App.Customer.collections.advfilters,
                el: App.Customer.Container.find('div#customer-filters-container')
            });

            App.Customer.views.advfilters.ops = search.advFilterOps; // [{code:'gt',label:'Greater Than',types:["number","date"]},..]
            App.Customer.views.advfilters.filterable = search.filterable;
            App.Customer.views.advfilters.render(); // view should be changing based on model changes
        } else {
            App.Customer.collections.advfilters.reset(search.advFilters);
        }

        // Render Faceted Search
        //App.Customer.collections.facets = new App.Customer.collections.FacetCollection(response.facetCounts);
        //App.Customer.views.facets = new App.Customer.views.FacetCollectionView({collection: App.Customer.collections.facets});
        //App.Customer.views.facets.render();

        var searchBtn = $('div#section-customers button.adv-filters-search');
        searchBtn.siblings('.spinner').hide();
        searchBtn.show();

        return response.entities;
    }
});

//View for customer listing
App.Customer.views.CustomerList = Backbone.View.extend({
    el : '.customer-list',
    selected: [],
    initialize: function() {
        var customers = this.collection;
        customers.on('sync', this.render, this);
    },
    render: function() {
        var self = this;
        this.$el.html('');
        this.collection.each(function(model) {
            self.addOne(model);
        });
        return this;
    },
    addOne: function(customer) {
        var view = new App.Customer.views.CustomerView({ model: customer });
        view.selected = this.selected;
        var html = view.render().el;
        this.$el.append(html);
        return this;
    }
});

App.Customer.views.updateForm = function(customer) {
    if (typeof customer.id != 'undefined' && customer.id > 0) {

        var customerDiv = $('div#section-customer-form');
        var customerInputs = customerDiv.find('input, select');
        var key = '';
        var value = '';
        var input = {};

        for (key in customer) {

            switch(key) {
                case 'id':
                    input = $('#customer_id');
                    value = customer[key];
                    break;
                case 'email':
                    input = $('#email');
                    value = customer[key];
                    break;
                case 'first_name':
                    value = customer[key] + ' ' + customer['last_name'];
                    input = $('#order_billing_name');
                    break;
                default:
                    //no-op
                    input = $('#order_' + key);
                    value = customer[key];
                    break;
            }

            if (input.length == 0) {
                continue;
            }

            if (key == 'is_shipping_same') {
                if (value == 1) {
                    //input.trigger('click');
                }
            } else {
                input.val(value);
            }
        }
    }
};

App.Customer.views.CustomerView = Backbone.View.extend({
    tagName: 'tr',
    className: 'item-grid',
    selected: [],
    events: {
        'click input.select-customer': 'customerClick'
    },
    template: _.template($('#customer-grid-single').html()),
    initialize: function() {
        this.model.bind('change', this.render, this);
        this.model.bind('remove', this.remove, this);
    },
    render: function() {
        var self = this;

        var customer = this.model.toJSON();
        var customerId = customer.id;

        if (typeof self.selected != 'undefined'
            && typeof self.selected == 'object'
            && self.selected.indexOf(customerId) > -1
        ) {
            customer.checked = 1;
        } else {
            customer.checked = 0;
        }

        if (typeof self.selected == 'number' && self.selected == customerId) {
            customer.checked = 1;
        }

        this.$el.html(this.template(customer));
        return this;
    },
    customerClick: function(e) {
        var self = this;
        var customer = this.model;
        var customerId = customer.get('id');
        var link = $(e.currentTarget);
        var checkbox = $('input#selected-customer-id-' + customerId);

        var selectedTab = $('div#section-customer li.tab-customer-selected');
        var searchTab = $('div#section-customer li.tab-customer-search');
        var selectedSection = $('div#section-customer div#section-customer-form');
        var searchSection = $('div#section-customer div#section-customers');

        searchTab.removeClass('active');
        searchTab.find('a').attr('aria-expanded', false);
        selectedTab.addClass('active');
        selectedTab.find('a').attr('aria-expanded', true);

        searchSection.removeClass('active');
        searchSection.removeClass('in');
        selectedSection.addClass('active');
        selectedSection.addClass('in');

        var cartStr = JSON.stringify(cart);
        var customerStr = JSON.stringify(customer.toJSON());

        // send update via ajax
        var url = App.serverURL + 'admin/order/update/customer';

        $.ajax({
            url: url,
            method: 'POST',
            dataType: 'json',
            data: {
                cart: cartStr,
                customer: customerStr
            }
        }).done(function(data) {
            // update cart
            renderTabs(data.cart);
        });
    }
});

App.Customer.views.GridFilterView = Backbone.View.extend({
    filterable: [],
    ops: [],
    count: 0,
    el: '',
    tagName: 'div',
    className: 'filter',
    events: {
        'click a.add-filter': 'addFilter',
        'click a.remove-filter': 'removeFilter',
        'change select.adv-filter-field': 'changeFilter'
    },
    template: _.template($('#customer-grid-adv-filter').html()),
    initialize: function() {
        var customers = this.collection;
        customers.on('reset', this.render, this);
    },
    render: function() {
        var self = this;
        this.$el.html('');

        this.collection.each(function(filter){
            self.renderFilter(filter);
        });

        this.renderFilter({
            field:'id',
            op:'equals',
            value:'',
            type:'number',
            choices: []
        });

        return this;
    },
    changeFilter: function(e) {
        var self = this;
        var select = $(e.currentTarget);
        var row = select.parent().parent();

        var field = select.find(':selected');
        var type = field.attr('data-type');
        var filterOps = row.find('select.adv-filter-op');
        filterOps.html('');
        for(var x=0; x < self.ops.length; x++) {
            var op = self.ops[x];
            if (op.types.indexOf(type) > -1) {
                filterOps.append('<option value="' + op.code + '"' + " data-types='{" + '"types":' + JSON.stringify(op.types) +"}'"+'>'+op.label+'</option>');
            }
        }

        // change filter input type as necessary
        var choiceJson = field.attr('data-choices');
        var optionStr = '';
        var choiceContainer = JSON.parse(choiceJson);
        var choices = choiceContainer.choices;
        for (var x = 0; x < choices.length; x++) {
            var choice = choices[x];
            optionStr += '<option value="' + choice.value + '">' + choice.label + '</option>';
        }

        if (!_.isUndefined(choiceJson)) {
            // render select input, remove text input if necessary
            var inputEl = row.find('select.adv-filter-input');
            if (inputEl.length) {
                inputEl.html(optionStr);
            } else {
                inputEl = row.find('input.adv-filter-input');
                if (_.isObject(inputEl)) {

                    var inputName = inputEl.attr('name');
                    $('<select name="' + inputName + '" class="form-control adv-filter-input">' + optionStr + '</select>').insertAfter(inputEl);
                    inputEl.remove();
                }
            }

        } else {
            // render text input, remove select input if necessary
            var inputEl = row.find('input.adv-filter-input');
            if (!inputEl.length) {
                inputEl = row.find('select.adv-filter-input');
                if (_.isObject(inputEl)) {
                    var inputName = inputEl.attr('name');
                    $('<input type="text" class="adv-filter-input" name="' + inputName + '" value="" />').insertAfter(inputEl);
                    inputEl.remove();
                }
            }
        }

        return this;
    },
    renderFilter: function(filter) {
        this.count++;

        var type = '';
        var ops = [];
        var fields = [];
        var value = '';
        var remove = false;
        var choices = [];

        // if it's a model object
        if (!_.isUndefined(filter.attributes)) {

            for(var x = 0; x < this.filterable.length; x++) {
                var field = this.filterable[x];
                if (field.code == filter.get('field')) {
                    type = field.type;
                    field.selected = 1;
                    if (!_.isUndefined(filter.get('choices'))) {
                        choices = filter.get('choices');
                    }
                }
                fields.push(field);
            }

            for(x=0; x < this.ops.length; x++) {
                var op = this.ops[x];
                if (op.types.indexOf(type) > -1) {
                    if (filter.get('op') == op.code) {
                        op.selected = 1;
                    }
                    ops.push(op);
                }
            }

            value = filter.get('value');
            remove = true;

        } else if (!_.isUndefined(filter.type)) {
            //else if it's a standard js object

            for(var x=0; x < this.filterable.length; x++) {
                var field = this.filterable[x];
                if (_.isUndefined(filter.field) && field.code == 'id') {
                    field.selected = 1;
                }
                fields.push(field);
            }

            for(var x=0; x < this.ops.length; x++) {
                var op = this.ops[x];
                if (op.types.indexOf(filter.type) > -1) {
                    ops.push(op);
                }
            }
        } else {
            ops = this.ops;
            fields = this.filterable;
        }

        this.$el.append(this.template({
            fields: fields,
            ops: ops,
            counter: this.count,
            value: value,
            remove: remove,
            choices: choices
        }));

        // Cleanup, remove selected flag
        for(x=0; x < this.ops.length; x++) {
            var op = this.ops[x];
            if (!_.isUndefined(op.selected)) {
                delete op.selected;
            }
        }

        // Cleanup, remove selected flag
        for(var x=0; x < this.filterable.length; x++) {
            var field = this.filterable[x];
            if (!_.isUndefined(field.selected)) {
                delete field.selected;
            }
        }

        return this;
    },
    addFilter: function(e) {
        e.preventDefault();
        this.count++;
        var link = $(e.currentTarget);
        link.removeClass('add-filter');
        link.addClass('remove-filter');
        link.html('<i class="glyphicon glyphicon-remove"></i>');
        var choices = [];

        var ops = [];
        for(var x=0; x < this.ops.length; x++) {
            var op = this.ops[x];
            //assuming ID is first on the list
            if (op.types.indexOf('number') > -1) {
                ops.push(op);
            }
        }

        this.$el.append(this.template({
            fields: this.filterable,
            ops: ops,
            counter: this.count,
            value: '',
            remove: false,
            choices: choices
        }));

        return this;
    },
    removeFilter: function(e) {
        e.preventDefault();
        var link = $(e.currentTarget);
        link.parent().parent().remove();
        return this;
    }
});

App.Customer.views.TableButtons = Backbone.View.extend({
    el : 'div.adv-filter-buttons',
    tagName: 'div',
    className: 'pull-right',
    events: {
        'click button.adv-filters-search': 'updateSearch'
    },
    initialize: function() {

    },
    updateSearch: function (e) {
        e.preventDefault();

        var searchBtn = $(e.target);
        searchBtn.hide();
        searchBtn.siblings('.spinner').show();

        var queryText = App.Customer.Container.find('input.search-query').val();

        // filter fields
        App.Customer.collections.customers.queryParams.filter_field = [];
        App.Customer.Container.find('select.adv-filter-field').each(function(){
            var self = $(this);
            App.Customer.collections.customers.queryParams.filter_field.push(self.val());
        });

        // filter operations
        App.Customer.collections.customers.queryParams.filter_op = [];
        App.Customer.Container.find('select.adv-filter-op').each(function(){
            var self = $(this);
            App.Customer.collections.customers.queryParams.filter_op.push(self.val());
        });

        // filter values
        App.Customer.collections.customers.queryParams.filter_val = [];
        App.Customer.Container.find('.adv-filter-input').each(function(){
            var self = $(this);
            App.Customer.collections.customers.queryParams.filter_val.push(self.val());
        });

        App.Customer.collections.customers.queryParams.q = queryText;
        App.Customer.collections.customers.currentPage = 1;
        App.Customer.collections.customers.fetch();

        return false;
    }
});

App.Customer.views.TableHeading = Backbone.View.extend({
    el : 'table thead.grid-header',
    tagName: 'tr',
    columns: ['id','first_name','last_name','email'],
    events: {
        'click th': 'gotoPage',
        'click button.adv-filters-search': 'updateSearch'
    },
    initialize: function() {
        var cells = this.collection;
        cells.on('all', this.render, this);
        //this.render(); // cannot render in initialize, since we're handling the key
    },
    render: function() {
        var self = this;
        this.$el.html('');

        var html = '';
        //html += '<th><input type="checkbox" value="1" name="customer_check_all"></th>';
        html += '<th>&nbsp;</th>';

        this.collection.each(function(cell) {
            if (self.columns.indexOf(cell.get('key')) >= 0) {

                var className = 'sorting';
                if (cell.get('isActive') == 1) {
                    if (cell.get('direction') == 'desc') {
                        className = 'sorting_desc';
                    } else {
                        className = 'sorting_asc';
                    }
                }

                html += '<th class="'+ className +'" data-sort="' + cell.get('key') + '">' + cell.get('label') + '</th>';
            }
        });

        this.$el.html('<tr>' + html + '</tr>');
        return this;
    },
    gotoPage: function(event) {
        var link = $(event.currentTarget);
        var sort = link.attr('data-sort');
        var sortDir = '1';
        if (link.hasClass('sorting_desc')) {
            sortDir = '-1';
            link.removeClass('sorting_desc');
            link.addClass('sorting_asc');
        } else {
            link.removeClass('sorting_asc');
            link.addClass('sorting_desc');
        }

        App.Customer.collections.customers.state.sortKey = sort;
        App.Customer.collections.customers.state.order = sortDir;
        App.Customer.collections.customers.state.currentPage = 1;
        App.Customer.collections.customers.fetch();

        return true;
    }
});

App.Customer.views.PaginatedView = Backbone.View.extend({
    el: '',
    tagName: 'div',
    className: 'pull-left',
    events: {
        'click button.prev': 'gotoPrev',
        'click button.next': 'gotoNext',
        'click a.page': 'gotoPage'
    },
    template: _.template($('#customer-pagination-template').html()),
    initialize: function() {
        this.collection.on('reset', this.render, this);
        this.collection.on('sync', this.render, this);
        this.render();
    },
    render: function() {
        this.$el.html(this.template(this.collection.state));
        return this;
    },
    gotoPrev: function(e) {
        e.preventDefault();
        this.collection.getPreviousPage();
        return this;
    },
    gotoNext: function(e) {
        e.preventDefault();
        this.collection.getNextPage();
        return this;
    },
    gotoPage: function(e) {
        e.preventDefault();
        var page = $(e.target).text();
        this.collection.getPage(parseInt(page));
        return this;
    }
});

</script>

<script type="text/javascript">
    $(function(){

        // for populating backbonejs properties
        var key = 'section-{{ section_id }}';
        App.Customer.Container = $('#' + key);

        // customer model collection
        App.Customer.collections.customers = new App.Customer.collections.PaginatedCollection({
            url: App.serverURL + 'admin/customer/'
        });

        // customer listing view, for all customers
        App.Customer.views.customers = new App.Customer.views.CustomerList({
            collection: App.Customer.collections.customers,
            el: App.Customer.Container.find('.customer-list')
        });

        {% if entity.get('customer_id') > 0 %}
        App.Customer.views.customers.selected = {{ entity.get('customer_id') }};
        {% endif %}

        // pager controls
        App.Customer.views.pager = new App.Customer.views.PaginatedView({
            collection: App.Customer.collections.customers,
            el: App.Customer.Container.find('div.grid-pager')
        });

        // grid buttons
        App.Customer.views.advfilters = new App.Customer.views.TableButtons({
            el: App.Customer.Container.find('div.adv-filters-buttons')
        });

        // fetch customer collection and trigger views
        App.Customer.collections.customers.fetch();

        var textInput = App.Customer.Container.find('input.search-query');
        textInput.keypress(function(e){
            // todo : auto search
            if (e.which == 13) {
                App.Customer.Container.find('div.adv-filters-buttons button.adv-filters-search').trigger('click');
                return false;
            }
            return true;
        });

        var strategyInputEl = App.Customer.Container.find('select[name="customer_strategy"]');
        var idInputEl = App.Customer.Container.find('input[name="customer_id"]');
        var passwordInputs = App.Customer.Container.find('.password-inputs');

        strategyInputEl.on('change', function(e){
            var self = $(this);
            var value = self.val();
            if (value == 'existing') {
                idInputEl.parent().show();
            } else {
                idInputEl.parent().hide();
            }

            if (value == 'new') {
                passwordInputs.show();
            } else {
                passwordInputs.hide();
            }
        })
    });
</script>
