<script type="text/template" id="product-grid-single">
    <td><input type="checkbox" class="select-product" id="product-<%- id %>" name="ids[<%- id %>]"<% if (checked == 1) { %> checked="checked"<% } %> /></td>
    <td><%- id %></td>
    <td><%- name %></td>
    <td><%- type %></td>
    <td><%- sku %></td>
    <td><%- price %></td>
    <td><%- qty %></td>
</script>

<script type="text/template" id="item-grid-single">
    <td><input type="checkbox" class="select-item" id="item-<%- product_id %>" name="product_ids[<%- product_id %>]" checked="checked" /></td>
    <td><%- product_id %></td>
    <td><%- name %></td>
    <td><%- sku %></td>
    <td><%- price %></td>
    <td><%- qty %></td>
</script>

<script type="text/template" id="product-grid-item">
    <td><input type="checkbox" class="select-product" id="product-<%- id %>" name="ids[<%- id %>]"<% if (checked == 1) { %> checked="checked"<% } %> /></td>
    <td><%- id %></td>
    <td><%- name %></td>
    <td><%- sku %></td>
    <td><%- price %></td>
    <td>
        <input type="number" name="product_qtys[<%- id %>]" value="1" />
    </td>
</script>

<script type="text/html" id="product-pagination-template">
    <% if (currentPage != 1) { %>
    <button class="prev btn-default btn">Prev</button>
    <% } %>

    <label for="page">Page</label>
    <input type="number" value="<%= currentPage %>" name="page" id="product-page" class="number"> of <%= totalPages %>

    <% if (lastPage != currentPage && lastPage != 0) { %>
    <button class="btn btn-default next">Next</button>
    <% } %>
</script>

<script type="text/html" id="product-grid-adv-filter">
    <div class="filter">
        <label>Filter</label>
        <select name="filter_field[<%= counter %>]" class="adv-filter-field">
            <% _.each(fields, function(field) { %>
            <option value="<%= field.code %>" data-type="<%= field.type %>"
            <% if (!_.isUndefined(field.selected)) { %> selected="selected"<% } %>
            <% if (!_.isUndefined(field.choices)) { %> data-choices='{"choices":<%= JSON.stringify(field.choices) %>}'<% } %>><%= field.label %></option>
            <% }); %>
        </select>

        <select name="filter_op[<%= counter %>]" class="adv-filter-op">
            <% _.each(ops, function(op) { %>
            <option value="<%= op.code %>" data-types='{"types":<%= JSON.stringify(op.types) %>}'<% if (!_.isUndefined(op.selected)) { %> selected="selected"<% } %>><%= op.label %></option>
            <% }); %>
        </select>

        <% if (choices.length > 0) { %>
        <select name="filter_val[<%= counter %>]" class="adv-filter-input">
            <% _.each(choices, function(option) { %>
            <option value="<%= option.value %>"<% if (option.value == value) { %> selected="selected"<% } %>><%= option.label %></option>
            <% }); %>
        </select>
        <% } else { %>
        <input name="filter_val[<%= counter %>]" type="text" class="adv-filter-input" value="<%= value %>" />
        <% } %>

        <% if (remove) { %>
        <a href="javascript:;" class="remove-filter"><i class="fa fa-times fa-lg"></i></a>
        <% } else { %>
        <a href="javascript:;" class="add-filter"><i class="fa fa-plus fa-fw fa-lg"></i></a>
        <% } %>
    </div>
</script>

<script type="text/javascript">

App.Product = {};
App.Product.models = {};
App.Product.collections = {};
App.Product.collections.dynamic = {};
App.Product.views = {};
App.Product.views.dynamic = {};

// Sortable options listing
App.Product.models.Sortable = Backbone.Model.extend({});
App.Product.collections.SortableCollection = Backbone.Collection.extend({
    model: App.Product.models.Sortable
});

// Filter options listing
App.Product.models.AdvFilter = Backbone.Model.extend({});
App.Product.collections.AdvFilterCollection = Backbone.Collection.extend({
    model: App.Product.models.AdvFilter
});

// Selected Product listing
App.Product.models.SelectedProduct = Backbone.Model.extend({});
App.Product.collections.SelectedProductCollection = Backbone.Collection.extend({
    model: App.Product.models.SelectedProduct
});

// Products
App.Product.models.Product = Backbone.Model.extend({});
App.Product.collections.PaginatedCollection = Backbone.PageableCollection.extend({
    key: '',
    url: App.serverURL + 'admin/product/',
    mode: 'server',
    model: App.Product.models.Product,
    state: {
        pageSize: 30,
        sortKey: 'name',
        order: 1,
        currentPage: 1,
        totalPages: null,
        totalRecords: null
    },
    queryParams: {
        sortKey: 'sort',
        order: 'direction',
        directions: {
            "-1": 'asc',
            "1": 'desc'
        },
        currentPage: 'page',
        format: 'json',
        type: 1
    },
    parse: function(fullResponse) {

        var response = fullResponse.result;
        var search = fullResponse.search;

        // Set state
        this.state.totalRecords = parseInt(response.total);
        this.state.totalPages = parseInt(response.pages);

        // handle table header sorting
        if (typeof(App.Product.views.sorting) === 'undefined' ||
                App.Product.views.sorting === null ||
                typeof(App.Product.collections.sorting) === 'undefined') {

            App.Product.collections.sorting = new App.Product.collections.SortableCollection(search.sortable);

            App.Product.views.sorting = new App.Product.views.TableHeading({
                collection: App.Product.collections.sorting,
                el: App.Product.Container.find('table thead.grid-header')
            });

            App.Product.views.sorting.render(); // view should be changing based on model changes
        } else {
            App.Product.collections.sorting.reset(search.sortable);
        }

        // handle adv. filters
        if (typeof(App.Product.views.advfilters) === 'undefined' ||
                App.Product.views.advfilters === null ||
                typeof(App.Product.collections.advfilters) === 'undefined') {

            App.Product.collections.advfilters = new App.Product.collections.AdvFilterCollection(search.advFilters);

            App.Product.views.advfilters = new App.Product.views.GridFilterView({
                collection: App.Product.collections.advfilters,
                el: App.Product.Container.find('div#products-filters-container')
            });

            App.Product.views.advfilters.ops = search.advFilterOps; // [{code:'gt',label:'Greater Than',types:["number","date"]},..]
            App.Product.views.advfilters.filterable = search.filterable;
            App.Product.views.advfilters.render(); // view should be changing based on model changes
        } else {
            App.Product.collections.advfilters.reset(search.advFilters);
        }

        // Render Faceted Search
        //App.Product.collections.facets = new App.Product.collections.FacetCollection(response.facetCounts);
        //App.Product.views.facets = new App.Product.views.FacetCollectionView({collection: App.Product.collections.facets});
        //App.Product.views.facets.render();

        return response.entities;
    }
});


/**
 * Product Listing for un-selected Products
 *
 */
App.Product.views.ProductList = Backbone.View.extend({
    el : '.product-list',
    selected: [],
    initialize: function() {
        var products = this.collection;
        products.on('add', this.addOne, this);
        this.render();
    },
    render: function() {
        this.$el.html('');
        return this;
    },
    addOne: function(product) {
        var view = new App.Product.views.ProductView({ model: product });
        view.selected = this.selected;
        this.$el.append(view.render().el);
        return this;
    }
});

/**
 * Each (un-selected) Product
 * @type {*|void}
 */
App.Product.views.ProductView = Backbone.View.extend({
    tagName: 'tr',
    className: 'item-grid',
    selected: [],
    events: {
        'click input.select-product': 'productClick'
    },
    template: _.template($('#product-grid-single').html()),
    initialize: function() {
        this.model.bind('change', this.render, this);
        this.model.bind('remove', this.remove, this);
    },
    render: function() {
        var self = this;

        var product = this.model.toJSON();
        var productId = product.id;

        if (self.selected.indexOf(productId) > -1) {
            product.checked = 1;
        } else {
            product.checked = 0;
        }

        this.$el.html(this.template(product));
        return this;
    },
    productClick: function(e) {
        var product = this.model;
        var self = this;

        var link = $(e.currentTarget);
        var idStr = link.attr('id');
        var idParts = idStr.split('-');
        var id = idParts[1];
        var checkbox = $('input#product-id-' + id);

        var item = product.toJSON();
        item.product_id = item.id;
        item.qty = 1;

        var cartStr = JSON.stringify(cart);
        var itemStr = JSON.stringify(item);

        // update totals

        if (checkbox.length > 0) {

            // send update via ajax
            var url = App.serverURL + 'admin/order/remove/item';

            $.ajax({
                url: url,
                method: 'POST',
                dataType: 'json',
                data: {
                    product_id: product.get('id'),
                    cart: cartStr
                }
            }).done(function(data) {

                // update cart
                renderTabs(data.cart);
            });

        } else {

            // send update via ajax
            var url = App.serverURL + 'admin/order/add/item';
            $.ajax({
                url: url,
                method: 'POST',
                dataType: 'json',
                data: {
                    cart: cartStr,
                    item: itemStr
                }
            }).done(function(data) {

                // update cart
                renderTabs(data.cart);
            });
        }
    }
});

/**
 * Product Listing for selected Products
 *
 * pass in the collection
 *  render rows
 *
 */
App.Product.views.SelectedProductList = Backbone.View.extend({
    el : '.selected-product-list',
    selected: [],
    initialize: function() {
        var products = this.collection;
        products.on('all', this.render, this);
    },
    render: function() {
        var self = this;
        this.$el.html('');
        this.collection.each(function(item) {
            self.addOne(item);
        });
        return this;
    },
    addOne: function(item) {
        var view = new App.Product.views.SelectedProductView({ model: item });
        this.$el.append(view.render().el);
        return this;
    }
});

/**
 * List of (selected) Products
 * @type {*|void}
 */
App.Product.views.SelectedProductView = Backbone.View.extend({
    tagName: 'tr',
    className: 'item-grid',
    selected: [],
    events: {
        'click input.select-item': 'itemClick'
    },
    template: _.template($('#item-grid-single').html()),
    initialize: function() {
        this.model.bind('change', this.render, this);
        this.model.bind('remove', this.remove, this);
    },
    render: function() {
        var self = this;

        var product = this.model.toJSON();
        var productId = product.id;

        if (self.selected.indexOf(productId) > -1) {
            product.checked = 1;
        } else {
            product.checked = 0;
        }

        this.$el.html(this.template(product));
        return this;
    },
    itemClick: function(e) {
        var item = this.model;
        var self = this;

        // todo: un-check product list checkbox

        // send update via ajax
        var url = App.serverURL + 'admin/order/remove/item';

        var cartStr = JSON.stringify(cart);

        $.ajax({
            url: url,
            method: 'POST',
            dataType: 'json',
            data: {
                product_id: item.get('product_id'),
                cart: cartStr
            }
        }).done(function(data) {

            // update cart
            renderTabs(data.cart);
        });

    }
});

App.Product.views.GridFilterView = Backbone.View.extend({
    filterable: [],
    ops: [],
    count: 0,
    el: '',
    tagName: 'div',
    className: 'filter',
    events: {
        'click a.add-filter': 'addFilter',
        'click a.remove-filter': 'removeFilter',
        'change select.adv-filter-field': 'changeFilter'
    },
    template: _.template($('#product-grid-adv-filter').html()),
    initialize: function() {
        var products = this.collection;
        products.on('reset', this.render, this);
    },
    render: function() {
        var self = this;
        this.$el.html('');

        this.collection.each(function(filter){
            self.renderFilter(filter);
        });

        this.renderFilter({
            field:'id',
            op:'equals',
            value:'',
            type:'number',
            choices: []
        });

        return this;
    },
    changeFilter: function(e) {
        var self = this;
        var select = $(e.currentTarget);
        var field = select.find(':selected');
        var type = field.attr('data-type');
        var filterOps = select.parent().find('select.adv-filter-op');
        filterOps.html('');
        for(var x=0; x < self.ops.length; x++) {
            var op = self.ops[x];
            if (op.types.indexOf(type) > -1) {
                filterOps.append('<option value="' + op.code + '"' + " data-types='{" + '"types":' + JSON.stringify(op.types) +"}'"+'>'+op.label+'</option>');
            }
        }

        // change filter input type as necessary
        var choiceJson = field.attr('data-choices');
        if (!_.isUndefined(choiceJson)) {
            // render select input, remove text input if necessary
            var inputEl = select.parent().find('select.adv-filter-input');
            if (inputEl.length) {

                inputEl.html('');
                var optionStr = '';
                var choiceContainer = JSON.parse(choiceJson);
                var choices = choiceContainer.choices;
                for (var x=0;x<choices.length;x++) {
                    var choice = choices[x];
                    optionStr += '<option value="' + choice.value + '">' + choice.label + '</option>';
                }

                inputEl.html(optionStr);

            } else {
                inputEl = select.parent().find('input.adv-filter-input');
                if (_.isObject(inputEl)) {

                    var optionStr = '';
                    var choiceContainer = JSON.parse(choiceJson);
                    var choices = choiceContainer.choices;
                    for (var x=0;x<choices.length;x++) {
                        var choice = choices[x];
                        optionStr += '<option value="' + choice.value + '">' + choice.label + '</option>';
                    }

                    var inputName = inputEl.attr('name');
                    $('<select name="' + inputName + '" class="adv-filter-input">' + optionStr + '</select>').insertAfter(inputEl);
                    inputEl.remove();
                }
            }

        } else {
            // render text input, remove select input if necessary
            var inputEl = select.parent().find('input.adv-filter-input');
            if (!inputEl.length) {
                inputEl = select.parent().find('select.adv-filter-input');
                if (_.isObject(inputEl)) {
                    var inputName = inputEl.attr('name');
                    $('<input type="text" class="adv-filter-input" name="' + inputName + '" value="" />').insertAfter(inputEl);
                    inputEl.remove();
                }
            }
        }

        return this;
    },
    renderFilter: function(filter) {
        this.count++;

        var type = '';
        var ops = [];
        var fields = [];
        var value = '';
        var remove = false;
        var choices = [];

        // if it's a model object
        if (!_.isUndefined(filter.attributes)) {
            for(var x=0; x < this.filterable.length; x++) {
                var field = this.filterable[x];
                if (field.code == filter.get('field')) {
                    type = field.type;
                    field.selected = 1;
                    if (!_.isUndefined(filter.get('choices'))) {
                        choices = filter.get('choices');
                    }
                }
                fields.push(field);
            }

            for(x=0; x < this.ops.length; x++) {
                var op = this.ops[x];
                if (op.types.indexOf(type) > -1) {
                    if (filter.get('op') == op.code) {
                        op.selected = 1;
                    }
                    ops.push(op);
                }
            }

            value = filter.get('value');
            remove = true;

        } else if (!_.isUndefined(filter.type)) {
            //else if it's a standard js object

            for(var x=0; x < this.filterable.length; x++) {
                var field = this.filterable[x];
                if (_.isUndefined(filter.field) && field.code == 'id') {
                    field.selected = 1;
                }
                fields.push(field);
            }

            for(var x=0; x < this.ops.length; x++) {
                var op = this.ops[x];
                if (op.types.indexOf(filter.type) > -1) {
                    ops.push(op);
                }
            }
        } else {
            ops = this.ops;
            fields = this.filterable;
        }

        this.$el.append(this.template({
            fields: fields,
            ops: ops,
            counter: this.count,
            value: value,
            remove: remove,
            choices: choices
        }));

        // Cleanup, remove selected flag
        for(x=0; x < this.ops.length; x++) {
            var op = this.ops[x];
            if (!_.isUndefined(op.selected)) {
                delete op.selected;
            }
        }

        // Cleanup, remove selected flag
        for(var x=0; x < this.filterable.length; x++) {
            var field = this.filterable[x];
            if (!_.isUndefined(field.selected)) {
                delete field.selected;
            }
        }

        return this;
    },
    addFilter: function(e) {
        e.preventDefault();
        this.count++;
        var link = $(e.currentTarget);
        link.removeClass('add-filter');
        link.addClass('remove-filter');
        link.html('<i class="fa fa-times fa-lg"></i>');
        var choices = [];

        var ops = [];
        for(var x=0; x < this.ops.length; x++) {
            var op = this.ops[x];
            //assuming ID is first on the list
            if (op.types.indexOf('number') > -1) {
                ops.push(op);
            }
        }

        this.$el.append(this.template({
            fields: this.filterable,
            ops: ops,
            counter: this.count,
            value: '',
            remove: false,
            choices: choices
        }));

        return this;
    },
    removeFilter: function(e) {
        e.preventDefault();
        var link = $(e.currentTarget);
        link.parent().remove();
        return this;
    }
});

App.Product.views.TableButtons = Backbone.View.extend({
    el : 'div.adv-filter-buttons',
    tagName: 'div',
    className: 'pull-right',
    events: {
        'click button.adv-filters-search': 'updateSearch'
    },
    initialize: function() {

    },
    updateSearch: function (e) {
        e.preventDefault();

        // filter fields
        App.Product.collections.products.queryParams.filter_field = [];
        App.Product.Container.find('select.adv-filter-field').each(function(){
            var self = $(this);
            App.Product.collections.products.queryParams.filter_field.push(self.val());
        });

        // filter operations
        App.Product.collections.products.queryParams.filter_op = [];
        App.Product.Container.find('select.adv-filter-op').each(function(){
            var self = $(this);
            App.Product.collections.products.queryParams.filter_op.push(self.val());
        });

        // filter values
        App.Product.collections.products.queryParams.filter_val = [];
        App.Product.Container.find('.adv-filter-input').each(function(){
            var self = $(this);
            App.Product.collections.products.queryParams.filter_val.push(self.val());
        });

        App.Product.collections.products.currentPage = 1;
        App.Product.collections.products.fetch();

        return false;
    }
});

App.Product.views.TableHeading = Backbone.View.extend({
    el : 'table thead.grid-header',
    tagName: 'tr',
    columns: ['id','type','name','sku','price','qty'],
    events: {
        'click th': 'gotoPage',
        'click button.adv-filters-search': 'updateSearch'
    },
    initialize: function() {
        var cells = this.collection;
        cells.on('all', this.render, this);
        //this.render(); // cannot render in initialize, since we're handling the key
    },
    render: function() {
        var self = this;
        this.$el.html('');

        var html = '';
        html += '<th><input type="checkbox" value="1" name="product_check_all"></th>';

        this.collection.each(function(cell) {
            if (self.columns.indexOf(cell.get('code')) >= 0) {

                var className = 'sorting';
                if (cell.get('isActive') == 1) {
                    if (cell.get('direction') == 'desc') {
                        className = 'sorting_desc';
                    } else {
                        className = 'sorting_asc';
                    }
                }

                html += '<th class="'+ className +'" data-sort="' + cell.get('code') + '">' + cell.get('label') + '</th>';
            }
        });

        this.$el.html('<tr>' + html + '</tr>');
        return this;
    },
    gotoPage: function(event) {
        var link = $(event.currentTarget);
        var sort = link.attr('data-sort');
        var sortDir = '1';
        if (link.hasClass('sorting_desc')) {
            sortDir = '-1';
            link.removeClass('sorting_desc');
            link.addClass('sorting_asc');
        } else {
            link.removeClass('sorting_asc');
            link.addClass('sorting_desc');
        }

        App.Product.collections.products.state.sortKey = sort;
        App.Product.collections.products.state.order = sortDir;
        App.Product.collections.products.state.currentPage = 1;
        App.Product.collections.products.fetch();

        return true;
    }
});

App.Product.views.PaginatedView = Backbone.View.extend({
    el: '',
    tagName: 'div',
    className: 'pull-left',
    events: {
        'click button.prev': 'gotoPrev',
        'click button.next': 'gotoNext',
        'click a.page': 'gotoPage'
    },
    template: _.template($('#product-pagination-template').html()),
    initialize: function() {
        this.collection.on('reset', this.render, this);
        this.collection.on('sync', this.render, this);
        this.render();
    },
    render: function() {
        this.$el.html(this.template(this.collection.state));
        return this;
    },
    gotoPrev: function(e) {
        e.preventDefault();
        this.collection.getPreviousPage();
        return this;
    },
    gotoNext: function(e) {
        e.preventDefault();
        this.collection.getNextPage();
        return this;
    },
    gotoPage: function(e) {
        e.preventDefault();
        var page = $(e.target).text();
        this.collection.getPage(parseInt(page));
        return this;
    }
});

</script>

<script type="text/javascript">
    $(function(){

        // for populating backbonejs properties
        var key = '{{ section_id }}';
        App.Product.Container = $('#'+key);

        // product model collection
        App.Product.collections.products = new App.Product.collections.PaginatedCollection({
            url: App.serverURL + 'admin/product/'
        });

        // product listing view, for all products
        App.Product.views.products = new App.Product.views.ProductList({
            collection: App.Product.collections.products,
            el: App.Product.Container.find('.product-list')
        });
        App.Product.views.products.selected = {{ product_ids|json_encode()|raw }};

        // pager controls
        App.Product.views.pager = new App.Product.views.PaginatedView({
            collection: App.Product.collections.products,
            el: App.Product.Container.find('div.grid-pager')
        });

        // grid buttons
        App.Product.views.advfilters = new App.Product.views.TableButtons({
            el: App.Product.Container.find('div.adv-filters-buttons')
        });

        // fetch product collection and trigger views
        App.Product.collections.products.fetch();

    });
</script>
