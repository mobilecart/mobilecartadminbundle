{% extends templatePath('Widgets/Template:edit.html.twig', 'admin') %}
{% block header_text %}Create Order{% endblock %}
{% block left_buttons %}{{ form_widget(form.status) }}{% endblock %}
{% block back_button %}
    <a href="{{ renderGridBackUrl('cart_admin_order') }}" class="btn btn-default">Back</a>
{% endblock %}
{% block javascripts %}

    {{ parent() }}

    <script src="{{ asset('bundles/mobilecartadmin/js/country-region-widget.js') }}" type="text/javascript"></script>

    <script type="text/javascript">
        var countryRegions = {{ country_regions|json_encode|raw }};
        var countryRegionWidget = new CountryRegionWidget({
            countryRegions: countryRegions
        });
    </script>

    <script type="text/javascript">

        var cart = {{ cart.toJson()|raw }};

        function renderTabs(aCart) {

            // update items
            App.Product.collections.selectedproducts = new App.Product.collections.SelectedProductCollection(aCart.items);
            App.Product.views.selectedproducts = new App.Product.views.SelectedProductList({
                collection: App.Product.collections.selectedproducts
            });
            App.Product.views.selectedproducts.render();

            /*
            // update shipments
            App.Shipping.collections.shipments = new App.Shipping.collections.SelectedMethodCollection(aCart.shipments);
            App.Shipping.views.shipments = new App.Shipping.views.SelectedMethodList({
                collection: App.Shipping.collections.shipments
            });
            App.Shipping.views.shipments.render(); //*/

            // update discounts
            App.Discount.collections.selecteddiscounts = new App.Discount.collections.SelectedDiscountCollection(aCart.discounts);
            App.Discount.views.selecteddiscounts = new App.Discount.views.SelectedDiscountList({
                collection: App.Discount.collections.selecteddiscounts
            });
            App.Discount.views.selecteddiscounts.render();

            // update totals
            App.Total.collections.totals = new App.Total.collections.TotalCollection(aCart.totals);
            App.Total.views.totals = new App.Total.views.TotalList({
                collection: App.Total.collections.totals
            });
            App.Total.views.totals.render();

            // update customer
            var customer = aCart.customer;
            App.Customer.views.updateForm(customer);

            cart = aCart;
            $('#order_json').val(JSON.stringify(cart));
        }

        $(function() {

            renderTabs(cart);

            formWidget.addSubmitCallback(function(){
                $('#order_json').val(JSON.stringify(cart));
                return true;
            });

            formWidget.addSubmitCallback(function(){
                var isValid = true;

                // validate each customer strategy
                var emailEl = App.Customer.Container.find('input[name="email"]');
                if (emailEl.val().length < 5) {
                    emailEl.parent().addClass('has-error');
                    isValid = false;
                } else {
                    emailEl.parent().removeClass('has-error');
                }

                var strategyInputEl = App.Customer.Container.find('select[name="customer_strategy"]');
                switch(strategyInputEl.val()) {
                    case 'existing':

                        var idInputEl = App.Customer.Container.find('input[name="customer_id"]');
                        if (idInputEl.val() > 0) {
                            idInputEl.parent().removeClass('has-error');
                        } else {
                            idInputEl.parent().addClass('has-error');
                            isValid = false;
                        }

                        break;
                    case 'guest':

                        break;
                    case 'new':

                        var passwordEl = App.Customer.Container.find('input[name="customer_password"]');
                        var passwordConfirmEl = App.Customer.Container.find('input[name="customer_password_confirm"]');

                        if (passwordEl.val().length >= 6) {
                            if (passwordEl.val() != passwordConfirmEl.val()) {
                                passwordEl.parent().addClass('has-error');
                                passwordConfirmEl.parent().addClass('has-error');
                                isValid = false;
                            } else {
                                passwordEl.parent().removeClass('has-error');
                                passwordConfirmEl.parent().removeClass('has-error');
                            }
                        } else {
                            passwordEl.parent().addClass('has-error');
                            passwordConfirmEl.parent().addClass('has-error');
                            isValid = false;
                        }

                        break;
                }

                return isValid;
            });
        });
    </script>

{% endblock %}
